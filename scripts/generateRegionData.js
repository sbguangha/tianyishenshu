const fs = require('fs');
const path = require('path');

console.log('Starting region data generation...');

const padCode = (code) => {
  return code.padEnd(6, '0');
};

// For some special municipalities and province-level entities, the city code is the same as the province code.
const cityIsProvince = ['110000', '120000', '310000', '500000'];

const sourceFilePath = path.resolve(__dirname, '../backend/src/data/pca-code.json');
const outputDir = path.resolve(__dirname, '../backend/src/data/');

try {
  // Read and parse the source JSON file
  const rawData = fs.readFileSync(sourceFilePath, 'utf-8');
  const data = JSON.parse(rawData);

  const provinces = [];
  const cities = {};
  const districts = {};

  // Process the data
  for (const provinceData of data) {
    const provinceCode = padCode(provinceData.code);
    provinces.push({ code: provinceCode, name: provinceData.name });

    const citiesList = [];
    if (provinceData.children) {
      for (const cityData of provinceData.children) {
        const cityCode = padCode(cityData.code);
        
        if (cityData.name.includes('直辖县级行政区划')) {
            if(cityData.children) {
                for (const subCityData of cityData.children) {
                    const subCityCode = padCode(subCityData.code);
                    citiesList.push({ code: subCityCode, name: subCityData.name });
                    // These are county-level cities, they act as their own district
                    districts[subCityCode] = [{ code: subCityCode, name: subCityData.name }];
                }
            }
        } else {
            citiesList.push({ code: cityCode, name: cityData.name });
            const districtsList = [];
            if (cityData.children) {
                for (const districtData of cityData.children) {
                    districtsList.push({
                        code: padCode(districtData.code),
                        name: districtData.name,
                    });
                }
            }
            if (districtsList.length > 0) {
                districts[cityCode] = districtsList;
            } else {
                // For cities without explicit districts (like Dongguan), treat them as their own district
                districts[cityCode] = [{ code: cityCode, name: cityData.name }];
            }
        }
      }
    }
    if (citiesList.length > 0) {
      cities[provinceCode] = citiesList;
    } else if (cityIsProvince.includes(provinceCode)) {
        // Handle municipalities like Beijing where the province is the city
        const cityCode = padCode(provinceData.code);
        cities[provinceCode] = [{code: cityCode, name: provinceData.name}];
        if(provinceData.children) {
            const districtsList = provinceData.children.map(d => ({code: padCode(d.code), name: d.name}));
            districts[cityCode] = districtsList;
        }
    }
  }

  // A manual correction for the nested structure in pca-code.json for municipalities
  for(const code of cityIsProvince) {
    const provinceName = provinces.find(p => p.code === code).name;
    const cityCode = padCode(code);
    const districtList = [];
    if(cities[code] && cities[code][0] && cities[code][0].name === '市辖区' && districts[cities[code][0].code]) {
        districtList.push(...districts[cities[code][0].code]);
    }
     if(cities[code] && cities[code][0] && cities[code][0].name === '县' && districts[cities[code][0].code]) {
        districtList.push(...districts[cities[code][0].code]);
    }
    cities[code] = [{code: cityCode, name: provinceName}];
    districts[cityCode] = districtList;
  }


  // Manually add Taiwan, Hong Kong, Macau
  provinces.push(
    { code: '710000', name: '台湾省' },
    { code: '810000', name: '香港特别行政区' },
    { code: '820000', name: '澳门特别行政区' }
  );
  cities['710000'] = [{ code: '710000', name: '台湾省' }];
  districts['710000'] = [{ code: '710000', name: '台湾省' }];
  cities['810000'] = [{ code: '810000', name: '香港特别行政区' }];
  districts['810000'] = [{ code: '810000', name: '香港特别行政区' }];
  cities['820000'] = [{ code: '820000', name: '澳门特别行政区' }];
  districts['820000'] = [{ code: '820000', name: '澳门特别行政区' }];


  // --- Generate and Write Files ---

  const commentHeader = `// This file is programmatically generated by scripts/generateRegionData.js
// Do not edit this file directly.
`;

  // provinces.data.ts
  const provincesContent = `${commentHeader}\nimport { Region } from './regionData';\n\nexport const provincesData: Region[] = ${JSON.stringify(provinces, null, 2)};\n`;
  fs.writeFileSync(path.join(outputDir, 'provinces.data.ts'), provincesContent);
  console.log('provinces.data.ts generated.');

  // cities.data.ts
  const citiesContent = `${commentHeader}\nimport { Region } from './regionData';\n\nexport const citiesData: { [key: string]: Region[] } = ${JSON.stringify(cities, null, 2)};\n`;
  fs.writeFileSync(path.join(outputDir, 'cities.data.ts'), citiesContent);
  console.log('cities.data.ts generated.');

  // districts.data.ts
  const districtsContent = `${commentHeader}\nimport { Region } from './regionData';\n\nexport const districtsData: { [key: string]: Region[] } = ${JSON.stringify(districts, null, 2)};\n`;
  fs.writeFileSync(path.join(outputDir, 'districts.data.ts'), districtsContent);
  console.log('districts.data.ts generated.');

  // regionData.ts (the main file)
  const regionDataContent = `// 完整的中国省市区三级行政区划数据
// This file is programmatically generated by scripts/generateRegionData.js

import { provincesData } from './provinces.data';
import { citiesData } from './cities.data';
import { districtsData } from './districts.data';

export interface Region {
  code: string;
  name: string;
}

export const provinces: Region[] = provincesData;
export const cities: { [key: string]: Region[] } = citiesData;
export const districts: { [key: string]: Region[] } = districtsData;
`;
  // Clean up old files before writing the new main regionData.ts
  if (fs.existsSync(path.join(outputDir, 'provinces.json'))) {
      fs.unlinkSync(path.join(outputDir, 'provinces.json'));
      console.log('Deleted old provinces.json');
  }
   if (fs.existsSync(path.join(outputDir, 'cities'))) {
      fs.rmSync(path.join(outputDir, 'cities'), { recursive: true, force: true });
      console.log('Deleted old cities/ directory');
  }
   if (fs.existsSync(path.join(outputDir, 'districts'))) {
      fs.rmSync(path.join(outputDir, 'districts'), { recursive: true, force: true });
      console.log('Deleted old districts/ directory');
  }
  
  fs.writeFileSync(path.join(outputDir, 'regionData.ts'), regionDataContent);
  console.log('regionData.ts generated.');

  console.log('Region data generation complete!');

} catch (error) {
  console.error('An error occurred during data generation:', error);
  process.exit(1);
} 